FILES / CONCEPTS THAT I DON'T UNDERSTAND

config.js: the package's main namespace and set basic config options.
helpers.js: collection helpers.
methods.js: collection methods.
published_fields.js: specifies which collection fields should be published in which context.
vs.
custom_fields.js: sets custom fields on other collections.
views.js: views used for query constructors.
parameters.js: the collection's query constructor.
email_routes.js: test routes for email templates.
server/publications.js: publications.

----------------------------------------

CUSTOMIZABLE PACKAGES

These are the packages that you might commonly need to customize or replace to tweak your app's layout, design, and behavior. You can either clone these packages and modify them directly, or extend their contents (see the Customizing Components section.), but you should not modify them directly.

Name	Description
nova:base-components	The default components that make up the Nova front-end.
nova:base-styles	Default styles (includes Bootstrap).
nova:base-routes	Default routes.
nova:email-templates	Email templates.
nova:i18n-en-us	Contains English language strings.

Extra Packages

These packages provide extra features but are not enabled out of the box.

Name	Description
nova:forms-tags	A component for autofilled tags.
nova:cloudinary	Automatically upload posts thumbnails to Cloudinary.
Debug Packages

These packages are provided to help you when doing local development.

Name	Description
nova:debug	Provides routes and utility for debugging.
nova:demo	A demo of how to use custom collections.

--------------------

DEPLOYMENT

The recommended way to deploy Nova is by using Mup, at least v1.0.3.

Configuration

You should have a Linux server online, for instance a Digital Ocean droplet running with Ubuntu.

Install globally the latest kadirahq/meteor-up.

npm install -g mup
Create Meteor Up configuration files in your project directory with mup init. In the example below, the configuration files are created in a .deploy directory at the root of your app.

cd my-app-folder
mkdir .deploy
cd .deploy
mup init
This will create two files :

mup.js - Meteor Up configuration file
settings.json - Settings for Meteor's settings API
Then, replace the content of the newly created settings.json with your own settings (you can use the content of sample_settings.json as a starter).

Fill mup.js with your credentials and optional settings (check the Mup repo for additional docs).

Note: the ROOT_URL field should be the absolute url of your deploy ; and you need to explicitly point out to use abernix/meteord:base docker image with a docker field within the meteor object.

...
meteor: {
  ...
  path: '../' // relative path of the app considering your mup config files
  env: {
        ROOT_URL: 'http://nova-app.com', // absolute url of your deploy
        ...
  }, 
  ...
  docker: {
        image:'abernix/meteord:base' // docker image working with meteor 1.4 & node 4
  },
  ...
},
...
You can take inspiration (or copy/paste) on this mup.js example.

Setup your server

From this folder, you can now setup Docker & Mongo your server with:

mup setup 
Deploy your app to your server

Still in the same folder, to deploy your app with your settings file:

mup --settings settings.json

Production: specify the path to settings.json in the tool you use to deploy (i.e. mup deploy --settings settings.json, see below)